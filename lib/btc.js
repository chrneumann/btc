// Generated by CoffeeScript 1.3.3
(function() {
  var Break, Instrument, Player, Tune, btc, instrument_sounds, playSound;

  this.btc = {};

  btc = this.btc;

  instrument_sounds = {};

  playSound = function(instrument) {
    var audio, prefix, sound, source;
    if (!(instrument_sounds[instrument] != null)) {
      audio = document.createElement("audio");
      source = document.createElement("source");
      prefix = 'sounds/' + instrument;
      if (audio.canPlayType('audio/mpeg;')) {
        source.type = 'audio/mpeg';
        source.src = prefix + '.mp3';
      } else {
        source.type = 'audio/ogg';
        source.src = prefix + '.ogg';
      }
      audio.appendChild(source);
      instrument_sounds[instrument] = audio;
    }
    sound = instrument_sounds[instrument];
    if (!sound.paused) {
      sound.pause();
      sound.currentTime = 0.0;
    }
    return sound.play();
  };

  Break = (function() {

    function Break(data) {
      this.name = data.name;
      this.length = data.length;
      this.instruments = data.instruments;
    }

    Break.prototype.get_instrument = function(name) {
      var notes, time, times, voice, _i, _len, _ref;
      notes = [];
      _ref = this.instruments[name];
      for (voice in _ref) {
        times = _ref[voice];
        for (_i = 0, _len = times.length; _i < _len; _i++) {
          time = times[_i];
          notes.push({
            'voice': voice,
            'time': time
          });
        }
      }
      return notes.sort(function(left, right) {
        return left.time - right.time;
      });
    };

    return Break;

  })();

  Tune = (function() {

    function Tune(data) {
      var break_, key, val, _ref;
      this.name = data.name;
      this.bars = data.bars;
      this.measure = data.measure;
      this.length = data.length;
      this.breaks = {};
      _ref = data.breaks;
      for (key in _ref) {
        val = _ref[key];
        break_ = new Break(data.breaks[key]);
        this.breaks[break_.name] = break_;
      }
    }

    return Tune;

  })();

  Instrument = (function() {

    function Instrument(name) {
      this.name = name;
      this.notes = [];
    }

    Instrument.prototype.play_break = function(thabreak) {
      return this.notes = thabreak.get_instrument(this.name);
    };

    Instrument.prototype.peek = function() {
      if (this.notes.length) {
        return this.notes[0];
      } else {
        return void 0;
      }
    };

    Instrument.prototype.pop = function() {
      if (this.notes.length) {
        return this.notes.shift();
      } else {
        return void 0;
      }
    };

    Instrument.prototype.remaining = function() {
      return this.notes;
    };

    return Instrument;

  })();

  Player = (function() {

    function Player() {
      var date, startstop, tune, _i, _len, _ref,
        _this = this;
      this.tunes = [funk, afoxe];
      _ref = this.tunes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tune = _ref[_i];
        $('#tune').append($('<option>', {
          value: tune.name
        }).text(tune.name));
      }
      $('#tune').change(function() {
        return _this.change_tune($('#tune').val());
      });
      this.change_tune("Funk");
      this.change_break("Groove");
      this.bpm = 120;
      this.step = 20;
      this.running = false;
      date = new Date();
      this.ticks = 0;
      this.last_ticks = date.getTime();
      startstop = function() {
        _this.toggle_running();
        if (_this.running) {
          $("#start").hide();
          return $("#stop").show();
        } else {
          $("#start").show();
          return $("#stop").hide();
        }
      };
      $("#start").click(startstop);
      $("#stop").click(startstop);
      $("#stop").hide();
      $("#bpm").val(this.bpm);
      $("#bpm").change(function() {
        return _this.bpm = $("#bpm").val();
      });
      this._next_run();
    }

    Player.prototype.change_tune = function(tune_name) {
      var instrument, key, tune, value, _i, _j, _len, _len1, _ref, _ref1, _ref2,
        _this = this;
      _ref = this.tunes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tune = _ref[_i];
        if (tune.name === tune_name) {
          this.tune = new Tune(tune);
          break;
        }
      }
      this.instruments = {};
      this.instrument_list = ['surdo', 'agogo', 'tamborim', 'repinique'];
      _ref1 = this.instrument_list;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        instrument = _ref1[_j];
        this.instruments[instrument] = new Instrument(instrument);
      }
      $('#break').children().remove();
      _ref2 = this.tune.breaks;
      for (key in _ref2) {
        value = _ref2[key];
        $('#break').append($('<option>', {
          value: key
        }).text(key));
      }
      $('#break').change(function() {
        return _this.change_break($('#break').val());
      });
      return this._next_run();
    };

    Player.prototype.change_break = function(thabreak_name) {
      this["break"] = thabreak_name;
      return this._next_run();
    };

    Player.prototype._draw_notes = function() {
      var clone, instrument, last_time, name, note, note_node, note_width, _ref, _results;
      $("#instrument").hide();
      $(".instrument:visible").empty();
      $(".instrument:visible").remove();
      _ref = this.instruments;
      _results = [];
      for (name in _ref) {
        instrument = _ref[name];
        clone = $("#instrument").clone();
        $(clone).children('.instrument-name').html(instrument.name);
        clone.attr('id', "instrument_" + instrument.name);
        $(clone).show();
        $("#instrument").after(clone);
        last_time = 0;
        note_width = 2;
        _results.push((function() {
          var _i, _len, _ref1, _results1;
          _ref1 = instrument.remaining();
          _results1 = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            note = _ref1[_i];
            note_node = $('<div></div>').addClass('instrument-note').text('o').attr('id', "instrument_" + instrument.name + "_note_" + note.voice + "_" + note.time).css('margin-left', (note.time - last_time - (last_time > 0 ? note_width : 0)) + 'em').css('width', note_width + 'em');
            last_time = note.time;
            _results1.push($(clone).children('.instrument-notes').append(note_node));
          }
          return _results1;
        })());
      }
      return _results;
    };

    Player.prototype.toggle_running = function() {
      this.running = !this.running;
      if (this.running) {
        return this.loop();
      }
    };

    Player.prototype.loop = function() {
      var _this = this;
      if (this.running) {
        setTimeout((function() {
          return _this.loop();
        }), this.step);
      }
      return this._looping();
    };

    Player.prototype._next_run = function() {
      var instrument, _i, _len, _ref;
      if (!(this.tune && this["break"])) {
        return;
      }
      this.time = 1;
      this.last_time = 0;
      _ref = this.instrument_list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        instrument = _ref[_i];
        this.instruments[instrument].play_break(this.tune.breaks[this["break"]]);
      }
      return this._draw_notes();
    };

    Player.prototype._looping = function() {
      var date, instrument, length, name, peek, tick_diff, _ref, _results;
      date = new Date();
      this.ticks = date.getTime();
      tick_diff = this.ticks - this.last_ticks;
      this.last_ticks = this.ticks;
      this.time += tick_diff / 1000.0 * this.bpm / 60.0 * this.tune.measure;
      $('#bar').css('margin-left', this.time + 6.5 + 'em');
      if (Math.floor(this.time) > Math.floor(this.last_time)) {
        this.last_time = this.time;
      }
      length = this.tune.breaks[this["break"]].length || this.tune.length;
      if (this.time >= this.tune.measure * this.tune.bars * length + 1) {
        this._next_run();
      }
      _ref = this.instruments;
      _results = [];
      for (name in _ref) {
        instrument = _ref[name];
        if (instrument.peek() && this.time >= instrument.peek().time) {
          peek = instrument.peek();
          $("#instrument_" + instrument.name + "_note_" + peek.voice + "_" + peek.time).css('color', 'red');
          playSound("" + instrument.name + "_" + peek.voice);
          _results.push(instrument.pop());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Player;

  })();

  $(document).ready(function() {
    var player;
    return player = new Player();
  });

}).call(this);
