// Generated by CoffeeScript 1.3.3
(function() {
  var Break, Instrument, Player, Tune, afoxe, custard, funk, playSound, sm_sounds, soundManager_preferFlash, use_flash;

  funk = {
    name: "Funk",
    tune_sign: "glasses_on_eyes",
    bars: 4,
    measure: 4,
    length: 2,
    breaks: [
      {
        name: "Groove",
        instruments: {
          surdo: {
            beat: [1, 4, 7, 9, 11, 17, 20, 23, 25]
          },
          repinique: {
            flare: [1, 5, 9, 13, 17, 21, 25],
            rim: [31],
            hand: [4, 8, 12, 16, 20, 24, 28, 30, 32],
            beat: [29]
          },
          snare: {
            beat: [5, 13, 21, 29],
            shadow: [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32]
          },
          tamborim: {
            beat: [5, 13, 15, 21, 27, 29]
          },
          agogo: {
            low: [1, 7, 17, 23],
            high: [4, 11, 13, 15, 20, 27, 29, 31]
          }
        }
      }, {
        name: "Break 1",
        length: 4,
        instruments: {
          surdo: {
            beat: [1, 3, 9, 11, 15, 17, 19, 25, 33, 35, 41, 43, 47, 49, 51, 57]
          },
          agogo: {
            high: [5, 7, 13, 21, 23, 27, 31, 37, 39, 45, 53, 55, 59, 60, 61]
          }
        }
      }, {
        name: "Break 2",
        length: 1,
        instruments: {
          agogo: {
            high: [1, 3, 5, 7, 9, 11, 13, 15]
          }
        }
      }, {
        name: "Call Break",
        length: 1,
        instruments: {
          agogo: {
            high: [1, 5, 6.333, 7.666, 9],
            low: [13]
          }
        }
      }
    ]
  };

  afoxe = {
    name: "Afoxe",
    sign: "afoxe",
    bars: 4,
    measure: 4,
    length: 2,
    breaks: [
      {
        name: "Groove",
        instruments: {
          surdo_low: {
            beat: [25, 29],
            silent: [1, 5, 9, 13, 17, 21]
          },
          surdo_mid: {
            dampened: [1, 9, 17],
            beat: [7, 15, 23, 25, 27, 29, 31]
          },
          surdo_high: {
            dampened: [1, 9, 17],
            beat: [7, 15, 23, 25, 27, 29, 31]
          },
          repinique: {
            rim: [7, 15, 23, 27, 31],
            flare: [1, 9, 17],
            hand: [4, 12, 20],
            silent: [5, 13, 21, 25, 29]
          },
          snare: {
            beat: [1, 5, 8, 9, 12, 17, 21, 24, 25, 28],
            shadow: [2, 3, 4, 6, 7, 10, 11, 13, 14, 15, 16, 18, 19, 20, 22, 23, 26, 27, 29, 30, 31, 32]
          },
          tamborim: {
            beat: [1, 3, 5, 7, 9, 10, 12, 13, 15, 17, 19, 21, 23, 25, 26, 28, 29, 31]
          },
          agogo: {
            high: [1, 3, 9, 10, 17, 19, 25, 26],
            low: [5, 7, 12, 14, 15, 21, 23, 28, 30, 31]
          },
          shaker: {
            beat: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]
          }
        }
      }, {
        name: "Bra Break",
        sign: "bra_break",
        length: 4,
        instruments: {
          others: {
            beat: [9, 10, 12, 13, 41, 42, 44, 45, 73, 74, 76, 77]
          },
          everyone: {
            beat: [97, 99, 101, 103, 105, 106, 108, 109, 111]
          },
          repinique: {
            beat: [1, 3, 5, 33, 35, 37, 65, 67, 69]
          }
        }
      }, {
        name: "Tamborim Stroke",
        sign: "tamborim_break",
        length: 1,
        instruments: {
          everyone: {
            beat: [1, 3, 5, 7, 9, 10, 12, 13, 15]
          }
        }
      }
    ]
  };

  custard = {
    name: "Custard",
    sign: "custard",
    bars: 4,
    measure: 4,
    length: 1,
    breaks: [
      {
        name: "Groove",
        instruments: {
          surdo_low: {
            dampened: [1, 9],
            beat: [5, 13, 15]
          },
          surdo_mid: {
            beat: [1, 9],
            dampened: [5, 13]
          },
          surdo_high: {
            beat: [1, 3, 9, 10, 12],
            dampened: [5, 13]
          },
          repenique: {
            beat: [3, 4, 7, 8, 11, 12, 15, 16]
          },
          snare: {
            beat: [1, 3, 5, 8, 10, 13],
            shadow: [2, 4, 6, 7, 9, 11, 12, 14, 15, 16]
          },
          tamborim: {
            beat: [1, 3, 5, 6, 8, 10, 12, 14, 15]
          },
          agogo: {
            high: [1, 3, 8, 10],
            low: [5, 6, 12, 14, 15]
          },
          shaker: {
            beat: [1, 3, 5, 7, 9, 11, 13, 15]
          }
        }
      }, {
        name: "Break 1",
        length: 4,
        solo: "surdo",
        instruments: {
          surdo: {
            beat: [1, 3, 5, 6, 17, 19, 21, 22, 33, 35, 37, 38]
          },
          others: {
            beat: [8, 10, 12, 14, 15, 24, 26, 28, 30, 31, 40, 42, 44, 46, 47]
          },
          everyone: {
            beat: [49, 51, 53, 54, 56, 58, 60, 62, 63]
          }
        }
      }, {
        name: "Break 2",
        solo: "tamborim",
        length: 4,
        instruments: {
          tamborim: {
            beat: [1, 3, 5, 6, 17, 19, 21, 22, 33, 35, 37, 38]
          },
          others: {
            beat: [8, 10, 12, 14, 15, 24, 26, 28, 30, 31, 40, 42, 44, 46, 47]
          },
          everyone: {
            beat: [49, 51, 53, 54, 56, 58, 60, 62, 63]
          }
        }
      }, {
        name: "Break 3",
        length: 8,
        instruments: {
          others: {
            beat: [1, 15, 17, 33, 47, 49, 51, 65, 67, 83, 97, 99]
          },
          snare: {
            beat: [99, 101, 103, 106, 108, 111, 112, 113, 114],
            shadow: [100, 102, 104, 105, 107, 109, 110]
          }
        }
      }, {
        name: "Break 5",
        length: 4,
        solo: "snare",
        instruments: {
          others: {
            beat: [15, 17, 31, 33, 39, 41, 47, 49, 53, 57, 61]
          },
          snare: {
            beat: [1, 3, 5, 8, 10, 13, 19, 21, 24, 26, 29, 35, 37, 43, 45, 51, 55, 59, 63],
            shadow: [2, 4, 6, 7, 9, 11, 12, 20, 22, 23, 25, 27, 28]
          }
        }
      }
    ]
  };

  use_flash = document.location.search.indexOf('use-flash') > -1;

  sm_sounds = {};

  soundManager.url = 'ext/soundmanager/swf/';

  soundManager.debugFlash = false;

  soundManager.useHighPerformance = true;

  soundManager.useFastPolling = true;

  soundManager.debugMode = false;

  if (use_flash) {
    soundManager_preferFlash = true;
    soundManager.useHTML5Audio = false;
  } else {
    soundManager.preferFlash = false;
    soundManager.useHTML5Audio = true;
  }

  playSound = function(instrument) {
    if (!(sm_sounds[instrument] != null)) {
      sm_sounds[instrument] = soundManager.createSound({
        id: 'sound_' + instrument,
        url: ['sounds/' + instrument + '.ogg', 'sounds/' + instrument + '.mp3', 'sounds/' + instrument + '.wav'],
        autoLoad: true,
        autoPlay: false,
        volume: 50
      });
    }
    return sm_sounds[instrument].play();
  };

  Tune = (function() {

    function Tune(data) {
      var break_, key, val, _ref;
      this.name = data.name;
      this.bars = data.bars;
      this.measure = data.measure;
      this.length = data.length;
      this.breaks = {};
      _ref = data.breaks;
      for (key in _ref) {
        val = _ref[key];
        break_ = new Break(data.breaks[key]);
        this.breaks[break_.name] = break_;
      }
    }

    Tune.prototype.get_break = function(name) {
      return this.breaks[name];
    };

    Tune.prototype.get_all_instruments = function() {
      var instrument, instrument_vals, instruments, name, val, _i, _len, _ref;
      instruments = {};
      _ref = this.breaks['Groove'].get_instruments();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        instrument = _ref[_i];
        instruments[instrument.name] = instrument;
      }
      instrument_vals = [];
      for (name in instruments) {
        val = instruments[name];
        instrument_vals.push(val);
      }
      return instrument_vals;
    };

    return Tune;

  })();

  Break = (function() {

    function Break(data) {
      var name, voices, _ref;
      this.name = data.name;
      this.length = data.length;
      this.solo = data.solo;
      this.instruments = [];
      _ref = data.instruments;
      for (name in _ref) {
        voices = _ref[name];
        this.instruments.push(new Instrument(name, voices));
      }
    }

    Break.prototype.get_instruments = function() {
      return this.instruments;
    };

    return Break;

  })();

  Instrument = (function() {

    function Instrument(name, voices) {
      var time, times, titles, voice, _i, _len;
      this.name = name;
      titles = {
        surdo_low: "Low Surdo",
        surdo_mid: "Mid Surdo",
        surdo_high: "High Surdo",
        surdo: "All Surdos",
        other: "All others"
      };
      if (this.name in titles) {
        this.title = titles[this.name];
      } else {
        this.title = this.name.substr(0, 1).toUpperCase() + this.name.substr(1);
      }
      this._notes = [];
      for (voice in voices) {
        times = voices[voice];
        for (_i = 0, _len = times.length; _i < _len; _i++) {
          time = times[_i];
          this._notes.push({
            'voice': voice,
            'time': time
          });
        }
      }
      this._notes.sort(function(left, right) {
        return left.time - right.time;
      });
      this.reset();
    }

    Instrument.prototype.reset = function() {
      return this._pos = 0;
    };

    Instrument.prototype.peek = function() {
      if (this._pos < this._notes.length) {
        return this._notes[this._pos];
      } else {
        return void 0;
      }
    };

    Instrument.prototype.pop = function() {
      var ret;
      ret = this._pos < this._notes.length ? this._notes[this._pos] : void 0;
      return this._pos += 1;
    };

    Instrument.prototype.get_notes = function() {
      return this._notes;
    };

    return Instrument;

  })();

  Player = (function() {

    function Player() {
      var startstop, tune, _i, _len, _ref,
        _this = this;
      this.tunes = [funk, afoxe, custard];
      _ref = this.tunes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tune = _ref[_i];
        $('#tune').append($('<option>', {
          value: tune.name
        }).text(tune.name));
      }
      $('#tune').change(function() {
        return _this.change_tune($('#tune').val());
      });
      this.change_tune("Funk");
      this.change_break("Groove");
      this.bpm = 120;
      this.step = 20;
      this.running = false;
      this.ticks = 0;
      startstop = function() {
        _this.toggle_running();
        if (_this.running) {
          $("#start").hide();
          return $("#pause").show();
        } else {
          $("#start").show();
          return $("#pause").hide();
        }
      };
      $("#start").click(startstop);
      $("#pause").click(startstop);
      $("#restart").click(function() {
        return _this.restart();
      });
      $("#pause").hide();
      $("#bpm").val(this.bpm);
      $("#bpm").change(function() {
        return _this.bpm = $("#bpm").val();
      });
      this.restart();
    }

    Player.prototype.restart = function() {
      return this._restart = true;
    };

    Player.prototype.change_tune = function(tune_name) {
      var key, tune, value, _i, _len, _ref, _ref1,
        _this = this;
      _ref = this.tunes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tune = _ref[_i];
        if (tune.name === tune_name) {
          this.tune = new Tune(tune);
          break;
        }
      }
      $('#break').children().remove();
      _ref1 = this.tune.breaks;
      for (key in _ref1) {
        value = _ref1[key];
        $('#break').append($('<option>', {
          value: key
        }).text(key));
      }
      $('#break').change(function() {
        return _this.change_break($('#break').val());
      });
      this.change_break('Groove');
      return this.restart();
    };

    Player.prototype.change_break = function(thabreak_name) {
      this["break"] = this.tune.get_break(thabreak_name);
      this._draw_notes();
      return this.restart();
    };

    Player.prototype._draw_notes = function() {
      var base, clone, even, instrument, last_time, note, note_node, note_width, notes, root, symbol, symbols, _i, _len, _ref, _results;
      root = $("#instruments");
      base = root.children("#instrument");
      base.hide();
      root.children(".instrument:visible").empty().remove();
      even = true;
      _ref = this["break"].get_instruments();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        instrument = _ref[_i];
        clone = base.clone();
        $(clone).children('.instrument-name').html(instrument.title);
        clone.attr('id', "instrument_" + instrument.name);
        if (even) {
          clone.addClass('even-row');
          even = false;
        } else {
          even = true;
        }
        $(clone).show();
        $("#instrument").after(clone);
        last_time = 0;
        note_width = 2;
        notes = $(clone).children('.instrument-notes');
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = instrument.get_notes();
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            note = _ref1[_j];
            symbols = {
              beat: 'x',
              shadow: '.',
              dampened: 'O'
            };
            if (note.voice in symbols) {
              symbol = symbols[note.voice];
            } else {
              symbol = note.voice.substr(0, 1);
            }
            note_node = $('<div class="instrument-note" style="margin-left:' + (note.time - last_time - (last_time > 0 ? note_width : 0)) + 'em; width:' + note_width + 'em' + '" id=' + ("instrument_" + instrument.name + "_note_" + note.voice + "_" + note.time) + '>' + symbol + '</div>');
            last_time = note.time;
            _results1.push(notes.append(note_node));
          }
          return _results1;
        })());
      }
      return _results;
    };

    Player.prototype.toggle_running = function() {
      var date;
      date = new Date();
      this.last_ticks = date.getTime();
      this.running = !this.running;
      if (this.running) {
        return this.loop();
      }
    };

    Player.prototype.loop = function() {
      var _this = this;
      if (this.running) {
        setTimeout((function() {
          return _this.loop();
        }), this.step);
      }
      return this._tick();
    };

    Player.prototype._restart_init = function() {
      var instrument, _i, _len, _ref;
      _ref = this["break"].get_instruments();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        instrument = _ref[_i];
        instrument.reset();
      }
      this.time = 1;
      this.last_time = 0;
      this._restart = false;
      return this._draw_notes();
    };

    Player.prototype._tick = function() {
      var date, i, instrument, length, peek, tick_diff, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4;
      date = new Date();
      this.ticks = date.getTime();
      tick_diff = this.ticks - this.last_ticks;
      this.last_ticks = this.ticks;
      this.time += tick_diff / 1000.0 * this.bpm / 60.0 * this.tune.measure;
      $('#bar').css('margin-left', this.time + 6.5 + 'em');
      if (Math.floor(this.time) > Math.floor(this.last_time)) {
        this.last_time = this.time;
      }
      length = this["break"].length || this.tune.length;
      if (this.time >= this.tune.measure * this.tune.bars * length + 1) {
        this.restart();
      }
      _ref = this["break"].get_instruments();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        instrument = _ref[_i];
        if (instrument.peek() && this.time >= instrument.peek().time) {
          peek = instrument.peek();
          $("#instrument_" + instrument.name + "_note_" + peek.voice + "_" + peek.time).css('color', 'red');
          if (instrument.name === 'everyone') {
            _ref1 = this.tune.get_all_instruments();
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              i = _ref1[_j];
              if (!((_ref2 = i.name) === 'shaker')) {
                playSound("" + i.name + "_beat");
              }
            }
          } else if (instrument.name === 'others') {
            _ref3 = this.tune.get_all_instruments();
            for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
              i = _ref3[_k];
              if (!((_ref4 = i.name) === this["break"].solo || _ref4 === 'shaker')) {
                playSound("" + i.name + "_beat");
              }
            }
          } else {
            playSound("" + instrument.name + "_" + peek.voice);
          }
          instrument.pop();
        }
      }
      if (this._restart) {
        return this._restart_init();
      }
    };

    return Player;

  })();

  $(document).ready(function() {
    var ischrome, player;
    player = new Player();
    ischrome = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;
    if (ischrome) {
      $('#nochrome').hide();
    }
    if (!use_flash) {
      return $('#use-flash').hide();
    }
  });

}).call(this);
